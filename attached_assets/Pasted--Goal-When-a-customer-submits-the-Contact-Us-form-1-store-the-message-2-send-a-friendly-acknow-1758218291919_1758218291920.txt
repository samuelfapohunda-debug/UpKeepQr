
Goal
When a customer submits the Contact Us form, (1) store the message, (2) send a friendly acknowledgement email to the email they provided, and (3) notify our ops inbox. Use SendGrid only. Keep all existing features (including the Request-a-Pro and Order Magnet dashboards) untouched.

Tech & Constraints
Stack: Node.js + Express; DB via Prisma + SQLite (or existing DB).


Email: SendGrid using @sendgrid/mail (no Postmark anywhere).


Spam control: simple rate limit + optional reCAPTCHA gate (feature-flagged).


Privacy: never echo full message content in the response JSON.



Data Model (Prisma)
Create a ContactMessage model:
id (uuid), createdAt, updatedAt


name (string, 1–120)


email (string, valid)


subject (string, 1–160)


message (text, 1–5000)


sourceIp (string)


status (new|read|replied, default new)


ticketId (short human slug, e.g., CU-48271)


tags (string[], optional)


Run safe migration.

API
POST /api/contact


Accept JSON: { name, email, subject, message }.


Validate with Zod/express-validator:


name 1–120 chars; email valid; subject 1–160; message 1–5000.


Rate limit: e.g., 5 req / 10 min / IP.


Generate ticketId like CU-<base36>; store sourceIp.


On success:


Persist ContactMessage.


Send acknowledgement to customer.


Send internal notification to ADMIN_EMAILS.


Return 201 { ticketId }.


(optional for ops UI later)
 GET /api/admin/contact-messages with filters (status, q, dateFrom, dateTo, paging).



Email Service
Create services/notifyContact.ts with:
sendContactAckEmail({ name, email, subject, message, ticketId })


sendContactOpsEmail({ name, email, subject, message, ticketId, createdAt })


Implementation notes:
Initialize SendGrid with SENDGRID_API_KEY.


From: FROM_EMAIL + FROM_NAME.


If SENDGRID_TEMPLATE_CONTACT_ACK is set, use dynamic template with dynamic_template_data. Otherwise, send inline HTML fallback (provided below).


Set mailSettings.sandboxMode.enable=true if SENDGRID_SANDBOX_MODE=true.


Retry on 429/5xx with simple exponential backoff (max 3).



Acknowledgement Email — Friendly Copy (use this content)
Subject
 Thanks for reaching out to UpKeepQR (Ticket {{ticketId}})
Preheader
 We got your message and a human is on it.
Plain Text (fallback)
Hi {{firstName}},

Thanks for contacting UpKeepQR! We received your message:

Subject: {{subject}}
Ticket: {{ticketId}}

Our team typically replies within one business day (often much faster).
If you have more details or photos to add, simply reply to this email
and they’ll attach to your ticket.

Helpful links:
• Track product updates: https://upkeepqr.com/updates
• FAQs: https://upkeepqr.com/help

Warmly,
UpKeepQR Support
support@upkeepqr.com

HTML (fallback)
<!doctype html>
<html>
  <body style="font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;line-height:1.5;margin:0;padding:24px;">
    <h2 style="margin:0 0 8px;">Thanks, {{firstName}} — we’ve got your message.</h2>
    <p style="margin:0 0 16px;color:#444;">Ticket <strong>{{ticketId}}</strong> • Subject: <strong>{{subject}}</strong></p>
    <p style="margin:0 0 12px;">Our team typically replies within <strong>one business day</strong> (usually much faster). If you have more details or photos, just reply to this email—your reply will attach to the same ticket.</p>
    <p style="margin:0 0 16px;">In the meantime, these may help:</p>
    <ul style="margin:0 0 16px;">
      <li><a href="https://upkeepqr.com/updates">Product updates</a></li>
      <li><a href="https://upkeepqr.com/help">FAQs & guides</a></li>
    </ul>
    <p style="margin:24px 0 0;">Warmly,<br/>The UpKeepQR Support Team<br/><a href="mailto:support@upkeepqr.com">support@upkeepqr.com</a></p>
  </body>
</html>

Dynamic Template Variables (if using SendGrid template)
 Provide these dynamic_template_data keys:
firstName (derive from name by splitting on space; default to there)


subject


ticketId


supportEmail (from env)


Optional: helpLinks (array), responseSla (“1 business day”)



Internal Notification Email (to ops)
Subject
 [ContactUs] {{ticketId}} — {{subject}}
Plain Text
New Contact Us message

Ticket: {{ticketId}}
From: {{name}} <{{email}}>
Subject: {{subject}}
Received: {{createdAt}}

Message:
{{message}}

Reply-to this email to respond to the customer.

Set reply-to to the customer’s email so ops can reply directly.


Send to ADMIN_EMAILS list.



Environment (.env.sample additions)
SENDGRID_API_KEY=your-key
FROM_EMAIL="support@upkeepqr.com"
FROM_NAME="UpKeepQR Support"
SENDGRID_TEMPLATE_CONTACT_ACK= # optional
SENDGRID_SANDBOX_MODE=true     # false in prod
ADMIN_EMAILS="ops@upkeepqr.com,admin@upkeepqr.com"


Frontend Hook (if Contact Us form exists)
On submit, POST to /api/contact.


Show success state: “Thanks! We’ve emailed you a confirmation. Ticket {{ticketId}}.”


Handle validation errors and rate-limit message.



Acceptance Criteria
Posting a valid contact message returns 201 with { ticketId }.


Customer receives the acknowledgement email at their provided address (sandbox in dev).


Ops inbox receives the internal notification with reply-to set to the customer’s email.


Messages are persisted in ContactMessage.


Rate limiting prevents abuse; invalid payloads return 400 with error details.


No existing dashboards or routes are removed or altered.



Tests
Unit/integration (Jest + Supertest):


Valid submission persists data and calls SendGrid twice (ack + ops).


Invalid email / too-short message → 400.


Rate limit exceeded → 429.


Snapshot test of built HTML fallback to ensure variables interpolate.



Implementation Notes
Create a small makeTicketId() helper (e.g., CU- + random base36, 5–6 chars).


Derive firstName by name.split(' ')[0] || 'there'.


Sanitize and trim inputs; store raw message safely.


Log send errors but don’t leak details to client; respond with generic success if persistence worked and email queued.



Please implement the endpoint, Prisma model, email service, and tests exactly as above. Use the provided copy for the acknowledgement email.


