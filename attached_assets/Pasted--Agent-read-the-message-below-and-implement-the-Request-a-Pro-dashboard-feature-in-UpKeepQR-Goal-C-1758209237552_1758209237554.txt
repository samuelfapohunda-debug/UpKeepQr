
Agent, read the message below and implement the Request a Pro dashboard feature in UpKeepQR.
Goal
Create a secure, lightweight Admin Dashboard to manage “Request a Pro” submissions. Admins can filter/search requests, view details, update status, assign a provider, add notes, and review history. Build both any missing backend endpoints and a small frontend admin UI.
Tech & Assumptions
Backend: Node.js + Express (existing app), SQLite via Prisma (preferred).


Email: SendGrid only (already configured elsewhere; no changes here).


Auth: Admin API uses Bearer token ADMIN_API_TOKEN. Frontend stores token in localStorage and sends it on each admin call.


File uploads/photos already exist in ProRequest.photos as URLs.



1) API Surface (create/extend as needed)
All admin endpoints require Authorization: Bearer ${ADMIN_API_TOKEN}.
GET /api/admin/pro-requests


Query params:
 status (new|assigned|in_progress|completed|canceled, multi allowed),
 trade, urgency, zip, providerAssigned,
 q (search in description/contact/address),
 page (default 1), pageSize (default 25),
 sortBy (createdAt|updatedAt|urgency|status), sortDir (asc|desc).


Returns: { items:[...], total, page, pageSize }.


GET /api/admin/pro-requests/:id


Returns full request record including contact info and photos.


PATCH /api/admin/pro-requests/:id/status


Body: { "status":"assigned" | "in_progress" | "completed" | "canceled", "providerAssigned":"<optional string>" }


Returns updated record.


Enforce valid transitions:


new -> assigned|canceled


assigned -> in_progress|canceled


in_progress -> completed|canceled


completed and canceled = terminal.


POST /api/admin/pro-requests/:id/notes


Body: { "message":"string (1–2000)" }


Creates an internal note tied to the request. Returns created note.


GET /api/admin/pro-requests/:id/history


Returns audit events (status changes, provider assignments, note creation).


GET /api/admin/providers


Query params: trade, zip, q


Returns provider matches (from Provider table/seed JSON).


Optional (nice-to-have)
POST /api/admin/export with same filters; returns CSV of current view.



2) Data Model Additions (Prisma)
AuditEvent
 id (uuid), requestId (fk ProRequest), createdAt,
 actor (string, e.g., "admin"),
 type (status_change|provider_assignment|note_created),
 data (JSON diff or payload snapshot).


Note
 id, requestId (fk), createdAt, author (string, "admin"), message (text).


(Keep existing ProRequest and Provider as previously defined.)

3) Admin Dashboard UI (single page app or route /admin/requests)
Auth Gate
First-time visitors see a “Sign in with Admin Token” input.


Store token in localStorage and attach to all /api/admin/* calls.


If any request returns 401 → show token prompt again.


Top Section
KPI cards computed from current filters:


New (count), Assigned, In-Progress, Completed (last 7 days)


Filters (persist to URL querystring):


Status (multi-select chips)


Trade (select)


Urgency (select)


ZIP (text, 5 digits)


Provider (text or select from fetched providers)


Search box (description, address, contact)


Requests Table
Columns (sortable where sensible):


Submitted (createdAt, relative + exact tooltip)


Tracking Code (copy button)


Trade


Urgency (badge)


ZIP


Requester (contactName)


Phone (click-to-copy)


Status (badge with color)


Provider Assigned (name or “—”)


Last Updated


Actions (View / Update / Assign)


Pagination controls (page/pageSize), and “Export CSV” of current view (optional).


Row Actions / Details Drawer
Clicking a row opens a right-side drawer with:


Summary: trade, urgency, status, provider, timestamps, tracking link.


Contact: name, email, phone (copy buttons).


Address: line1/line2, city, state, zip (map link).


Description


Photos: thumbnails → click to open full-size in new tab.


Status Update:


Dropdown limited by valid transitions (see rules above).


“Update” button (confirm dialog).


Assign Provider:


Button opens Provider Picker dialog:


Pre-filter by request.trade and zip (show count).


Search input (q) and filter by trade, zip.


Provider list: name, trade, coverage zips, email/phone.


Select provider → set providerAssigned on the request and (optionally) update status to assigned.


Internal Notes:


Textarea + “Add Note” button.


List of notes (reverse chronological) with timestamp and author.


History:


Timeline view from /history endpoint:


Example items: “Status: new → assigned”, “Provider: — → Peachtree Roofing”, “Note added”.


Bulk Actions (optional if quick)
Select rows → bulk update status to assigned or canceled.


UX Details
Show toasts on success/failure.


Disable buttons while saving.


Keyboard/accessibility: labeled inputs, focus traps in dialogs.



4) Validation & Guards
Frontend guards:


Status transitions enforced client-side (and server validates again).


ZIP format 5 digits.


Server re-checks:


Valid status transition.


providerAssigned must be non-empty string when setting status to assigned.


Errors return JSON with message and field where relevant; surface them in the UI.



5) Samples
Assign Provider + Status (one call):
 PATCH /api/admin/pro-requests/:id/status
 Body:
{ "status":"assigned", "providerAssigned":"Peachtree Roofing" }

Add Note:
 POST /api/admin/pro-requests/:id/notes
 Body:
{ "message":"Left voicemail; awaiting callback." }

Fetch Providers for Dialog:
 GET /api/admin/providers?trade=roofing&zip=30312&q=peach

6) Acceptance Criteria
Admin token gate works; unauthorized users cannot access data.


Filters, search, sorting, and pagination work and are reflected in the URL.


Table shows all required columns with real data and status badges.


Detail drawer loads full request data and photos.


Status update respects allowed transitions (server-validated).


Assign provider updates providerAssigned and (if chosen) moves status to assigned.


Notes can be added and are immediately visible.


History timeline reflects status/provider/notes changes.


Errors and empty states are handled gracefully.


Lighthouse accessibility score ≥ 90 for the dashboard page.



7) Implementation Notes
Frontend can be a single React page under /admin/requests (Vite or Next.js app route), styled with Tailwind (simple table + dialog components). Store the token in localStorage; attach it via fetch interceptor.


Backend should add audit events on:


status change, provider set/unset, note creation.


Keep responses small and fast; index DB on status, trade, zip, createdAt.


Environment (.env.sample additions)
ADMIN_API_TOKEN="supersecrettoken"
PUBLIC_BASE_URL="http://localhost:3000"

Please implement the endpoints, Prisma models/migrations, and the React-based dashboard page. Add minimal Jest tests for the new admin endpoints and a quick Playwright test that signs in with token, filters to status=new, opens a row, assigns a provider, and confirms status becomes assigned.

Information the Admin Needs (for status + assignment)
Request metadata: id, publicTrackingCode, createdAt/updatedAt


Service details: trade, urgency, description, photos


Location: addressLine1/2, city, state, zip


Contact: contactName, contactEmail, contactPhone


Current workflow: status, providerAssigned


Provider options: list of providers filtered by trade and zip (+ free text search)


Ops context: internal notes, history (who/what/when)


Quick links: copy tracking link, open map to address



Deliverables
Updated backend routes + Prisma models/migrations


React admin page /admin/requests with filters/table/drawer/assign/status/notes/history


Tests (Jest + Playwright) and a short README for how to run the admin




