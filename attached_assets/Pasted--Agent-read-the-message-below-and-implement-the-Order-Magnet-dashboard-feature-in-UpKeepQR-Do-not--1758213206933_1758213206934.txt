
Agent, read the message below and implement the Order Magnet dashboard feature in UpKeepQR.
Do not delete, rename, or modify the existing Request a Pro admin dashboard or its routes. Build a new, separate dashboard and API for managing Order Magnet only.
Goal
Create a secure Admin Dashboard to manage Order Magnet lifecycle: orders, production/batching for print, shipping, delivery, and activation (when a customer activates a magnet/QR). Include filters, search, detail views, status updates, provider/printer batching, shipping tracking, and activation analytics.
Tech & Assumptions
Existing stack: Node.js + Express, Prisma + SQLite (or existing DB).


Frontend: React + Tailwind (same style as current admin).


Auth: Bearer ADMIN_API_TOKEN (reuse existing guard).


Email: SendGrid only (reuse existing service if present).


QR: Each magnet item has a unique activationCode that maps to a public route like /m/{code}.



1) New Routes & Navigation (keep Request a Pro intact)
Add left-nav items under Admin:


Requests (existing) → leave untouched


Order Magnet → new route at /admin/magnets


New API namespace: /api/admin/magnets/*
 Do not change /api/admin/pro-requests/*.



2) Data Model (Prisma)
Add these models (or equivalent tables). Migrate safely.
MagnetOrder
 id (uuid), createdAt, updatedAt,
 customerName, customerEmail, customerPhone,
 shipAddressLine1, shipAddressLine2?, shipCity, shipState, shipZip, shipCountry,
 subtotal, shippingFee, discount, tax, total,
 paymentStatus (unpaid|paid|refunded|partial_refund),
 paymentProvider (stripe|manual|other), paymentRef? (e.g., Stripe PI),
 status (new|paid|in_production|shipped|delivered|activated|canceled|refunded),
 source? (campaign or channel), utmSource?, utmMedium?, utmCampaign?,
 notes? (text).


MagnetItem
 id (uuid), orderId (fk MagnetOrder),
 sku, quantity (default 1), unitPrice,
 activationCode (unique short code), qrUrl (public URL to /m/{code}),
 activationStatus (inactive|activated|deactivated), activatedAt?, activatedByEmail?,
 scanCount (int, default 0), lastScanAt?,
 printBatchId? (fk MagnetBatch), serialNumber? (printed ID), printFileUrl?.


MagnetBatch (print/production batch)
 id (uuid), name, printerName?,
 status (open|submitted|printing|complete|canceled),
 unitCost?, quantity (derived),
 submittedAt?, completedAt?, notes?.


Shipment
 id (uuid), orderId (fk), carrier?, trackingNumber?, labelUrl?,
 status (pending|label_created|in_transit|out_for_delivery|delivered|exception|lost),
 shippedAt?, expectedDelivery?, deliveredAt?.


MagnetAuditEvent
 id (uuid), orderId?, itemId?, createdAt, actor ("admin"),
 type (order_status|item_activation|batch_change|shipment_update|note_created),
 data (JSON snapshot/diff).


(If a Customer model exists, you can FK to it; otherwise keep fields on MagnetOrder.)

3) Admin API (all require Authorization: Bearer ADMIN_API_TOKEN)
GET /api/admin/magnets/orders
 Query: status, paymentStatus, dateFrom, dateTo, q (search name/email/sku/zip),
 sku, zip, batchId, carrier, activationStatus,
 page=1, pageSize=25, sortBy=createdAt|updatedAt|status|total, sortDir=asc|desc.
 Return { items:[...], total, page, pageSize }.


GET /api/admin/magnets/orders/:id
 Return full order incl. items, shipment, audit.


PATCH /api/admin/magnets/orders/:id/status
 Body: { status: "paid"|"in_production"|"shipped"|"delivered"|"activated"|"canceled"|"refunded", note?: string }
 Enforce legal transitions (see below). Emit audit event.


PATCH /api/admin/magnets/orders/:id/shipment
 Body: { carrier?: string, trackingNumber?: string, shippedAt?: ISO, expectedDelivery?: ISO }
 Update Shipment, optionally set order status → shipped. Emit audit.


POST /api/admin/magnets/orders/:id/resend-email
 Body: { type: "confirmation"|"shipped"|"delivered"|"activation_reminder" }
 Use SendGrid to re-send the right email.


POST /api/admin/magnets/orders/:id/activate
 Body: { itemId?: string, activationEmail?: string }
 Manually mark one item (or all order items if omitted) as activated, set activatedAt, and if all items activated → optionally set order status activated. Emit audit.


GET /api/admin/magnets/items
 Query: activationStatus, sku, batchId, q, page, pageSize.
 List individual magnet items (for item-level ops).


PATCH /api/admin/magnets/items/:itemId/batch
 Body: { batchId: string|null }
 Assign/unassign item to a MagnetBatch. Emit audit.


GET /api/admin/magnets/batches
 List batches with counts and status.


POST /api/admin/magnets/batches
 Body: { name: string, printerName?: string, notes?: string }
 Create batch (status="open").


PATCH /api/admin/magnets/batches/:id/status
 Body: { status: "submitted"|"printing"|"complete"|"canceled", unitCost?: number, submittedAt?: ISO, completedAt?: ISO }
 Emit audit.


GET /api/admin/magnets/stats
 Return KPI metrics for dashboard cards (see below).


(Optional) POST /api/admin/magnets/export returns CSV of current filtered Orders or Items.


Status Transitions (server-enforced)
 new → paid|canceled
 paid → in_production|canceled|refunded
 in_production → shipped|canceled
 shipped → delivered|exception
 delivered → activated
 refunded and canceled are terminal.

4) Admin UI — /admin/magnets
A) Top KPIs (cards)
New Orders (7d)


Paid, not in production


In Production


Shipped (7d) and Delivered (7d)


Activation Rate = activated items / total items (last 30d)


Avg Time to Activation (delivered→activated)


Refunds (30d) and Revenue (30d) = sum(total) where paymentStatus=paid - refunds


B) Filters (persist in URL)
Status (multi): new, paid, in_production, shipped, delivered, activated, canceled, refunded


Payment Status: unpaid, paid, refunded, partial_refund


Date Range: createdAt


SKU


ZIP


Batch


Carrier


Activation: inactive / activated


Search (name/email/order id/item serial/activation code)


C) Orders Table
Columns:
Created (relative + tooltip ISO)


Order ID


Customer (name + email)


Ship To (city, state, zip)


Items (count) / SKU(s)


Total (currency) + Payment Status


Order Status (badge)


Shipment (carrier + trackingNumber with copy)


Activation (% items activated)


Updated


Actions (View / Update / Ship / Activate / Email)


D) Order Detail Drawer (or page)
Sections:
Summary: id, created/updated, source/utm, notes


Customer & Contact: name, email (mailto), phone (copy)


Shipping Address: map link


Items: list with sku, serialNumber, activationCode, QR preview (qrUrl), activation status & timestamps


Shipment: carrier, tracking, label link, status, dates (edit inline)


Status Update: dropdown limited by legal transitions; confirm before save


Emails: buttons to resend confirmation/shipped/delivered/activation reminder


Audit History: timeline from MagnetAuditEvent


E) Items View (tab)
Filter items by activationStatus, sku, batch


Bulk assign to Batch


Quick actions: copy activationCode, open qrUrl, mark manual activation


F) Batches View (tab)
Create Batch, assign/unassign items


Track batch status (open → submitted → printing → complete)


Unit cost entry and roll-up of total cost


Export CSV of batch contents


G) Optional Charts (if quick)
Funnel: Orders → Paid → In Production → Shipped → Delivered → Activated


Time to Activation histogram



5) Validation & Guards
Frontend and server both enforce status transitions.


activationCode unique; regenerate on collision.


ZIP = 5 digits; currency > 0 where applicable.


Shipment updates require at least carrier or trackingNumber.


Audit every change with MagnetAuditEvent.



6) Emails (reuse SendGrid service)
On paid → send order confirmation (items + ship ETA if known).


On shipped → send tracking email.


On delivered → send activation reminder with CTA to /m/{code}.


Resend endpoints hook those templates.



7) Environment (.env.sample additions)
# No changes to Request a Pro envs
ADMIN_API_TOKEN=supersecrettoken

# Optional payment metadata
PAYMENT_PROVIDER=stripe
STRIPE_SECRET_KEY=sk_test_...

# Optional shipping metadata (manual entry for now)
DEFAULT_CARRIER=UPS


8) Acceptance Criteria
New /admin/magnets page exists and is accessible only with ADMIN_API_TOKEN.


Request a Pro dashboard remains unchanged and accessible.


Orders list renders with filters, sorting, pagination.


Detail drawer shows items, QR previews, shipment, audit.


Admin can:


Change order status with legal transitions enforced.


Create/edit shipment (carrier, tracking, dates).


Assign items to batches and advance batch status.


Manually activate an item (and reflect in Activation %).


Resend any order email.


KPIs and stats endpoint populate top cards.


CSV export (if implemented) respects current filters.


All actions produce MagnetAuditEvent entries.



9) Testing & Docs
Jest + Supertest for new endpoints (status transition, shipment update, batch assign, manual activation).


Playwright happy path: filter orders → open detail → set shipped → add tracking → mark delivered → activate item.


Update README.md with routes, envs, and how to run migrations.



Admin Needs (data points to display)
Order basics: id, created/updated, customer, email, phone, ship city/state/zip


Money: subtotal, shipping, discount, tax, total, payment status/provider/ref


Lifecycle: order status, dates by step


Items: count, sku, serial, activationCode, activation status/time, QR link, scan count, last scan


Shipment: carrier, tracking, label link, shipped/delivered/ETA


Batch: batch id/name, printer, status, unit cost


Ops: notes, UTM/source, audit history


Performance: activation rate, avg time to activation, refunds, revenue (30d), stuck orders



Important Final Instruction
Do not modify or remove the existing Request a Pro dashboard, files, or routes. Add new code under /api/admin/magnets/*, new Prisma models/migrations, and a new page at /admin/magnets with its own components and nav entry.

