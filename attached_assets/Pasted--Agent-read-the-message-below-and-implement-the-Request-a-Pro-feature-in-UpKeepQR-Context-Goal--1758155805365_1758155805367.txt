
Agent, read the message below and implement the Request a Pro” feature in UpKeepQR.
Context & Goal
Implement the “Request a Pro” feature in UpKeepQR. Users submit a short form (trade, description, urgency, address, contact, optional photos). The system stores the request, emails admins (and the requester), and shows a confirmation + tracking page. Provide a lightweight admin view to list and update statuses.
Tech & Constraints
Stack: Node.js + Express (existing app). Use TypeScript if fast; otherwise JavaScript with JSDoc types.


Database: SQLite via Prisma (preferred) or better-sqlite3.


Email: SendGrid only using @sendgrid/mail. No Postmark.


File uploads: up to 5 images. If CLOUDINARY_URL is present, upload via Cloudinary; otherwise save under /uploads and serve statically.


Security: rate limit public create endpoint; validate & sanitize inputs.


Public create is unauthenticated; admin endpoints protected by Bearer token ADMIN_API_TOKEN.


Deliverables
Backend routes under /api:


POST /api/pro-requests – create new request (JSON or multipart for photos).


GET /api/pro-requests/:id – public read; redacts contact unless admin=true and valid admin token.


PATCH /api/pro-requests/:id/status – admin-only; updates status and optional providerAssigned.


POST /api/pro-requests/:id/message – admin-only internal note (optional).


GET /api/providers?trade=&zip= – mock provider directory from a JSON seed.


Data model (Prisma):


ProRequest: id (uuid), timestamps, trade (roofing|plumbing|electrical|hvac|general), urgency (emergency|24h|3days|flexible), description (1–2000), photos (string[] URLs), full address, contactName|Email|Phone, preferredWindows, status (new|assigned|in_progress|completed|canceled, default new), providerAssigned?, publicTrackingCode (short slug).


Provider: id, name, trade, coverageZips (string[]), email, phone.


Email notifications (SendGrid):


Create services/notify.ts that wraps @sendgrid/mail:


Initialize with SENDGRID_API_KEY.


From: FROM_EMAIL (and optional FROM_NAME).


Use dynamic templates if SENDGRID_TEMPLATE_CONFIRM / SENDGRID_TEMPLATE_ADMIN are set; otherwise build plaintext/HTML bodies inline.


Add category: 'upkeepqr-pro-requests', set mailSettings.sandboxMode.enable=true when SENDGRID_SANDBOX_MODE=true.


On 429/5xx, retry with exponential backoff (max 3 tries).


On create:


Email admins (list from ADMIN_EMAILS) with full details + admin link.


Email requester with confirmation and tracking link /track/{publicTrackingCode}.


Optional feature flag EMAIL_PROVIDERS=true: if set, also email matched providers (trade+zip) using a separate template; otherwise skip.


Uploads


Use Multer. If CLOUDINARY_URL exists, upload via Cloudinary SDK and store returned secure URLs; else save to /uploads and expose via app.use('/uploads', express.static(...)).


Validation & rate limiting


Use Zod or express-validator to enforce enums, lengths, email/phone formats, zip 5 digits, ≤5 images, ≤5MB each, mimetypes jpg|png|webp|heic.


express-rate-limit on POST /api/pro-requests (e.g., 10 reqs / 10 mins per IP).


Frontend (minimal)


Public page /request-a-pro (or modal):


Fields: Trade, Urgency, Description, Address, Name, Email, Phone, Preferred Windows, Photos (≤5).


Client-side validation, progress UI while uploading.


Success → show confirmation with tracking URL.


Tracking page /track/:code:


Non-sensitive summary, current status, last updated.


Admin page /admin/requests:


Tiny login box to store ADMIN_API_TOKEN in localStorage and attach as Bearer for all admin calls.


Table list, status filter, row detail panel for status updates, assign provider, add note.


Testing & docs


Jest + Supertest: create request (with/without photos), validation failures, rate limit behavior, admin auth for PATCH, email called with expected payload.


README.md: setup, env vars, migrations, dev run, curl samples.


Environment (.env.sample)
PORT=3000
DATABASE_URL="file:./dev.db"

# Email (SendGrid only)
SENDGRID_API_KEY=your-sendgrid-key
FROM_EMAIL="no-reply@upkeepqr.com"
FROM_NAME="UpKeepQR"
ADMIN_EMAILS="ops@upkeepqr.com,admin@upkeepqr.com"
SENDGRID_TEMPLATE_CONFIRM= # optional dynamic template id
SENDGRID_TEMPLATE_ADMIN=   # optional dynamic template id
SENDGRID_SANDBOX_MODE=true # true for local/dev

# Admin
ADMIN_API_TOKEN="supersecrettoken"

# File uploads (optional)
CLOUDINARY_URL="cloudinary://<key>:<secret>@<cloud>"

# Public URL
PUBLIC_BASE_URL="http://localhost:3000"

# Feature flags
EMAIL_PROVIDERS=false

Exact API contracts
POST /api/pro-requests

 {
  "trade":"roofing",
  "urgency":"24h",
  "description":"Shingles missing after storm; small leak near chimney.",
  "addressLine1":"123 Main St",
  "addressLine2":"",
  "city":"Atlanta",
  "state":"GA",
  "zip":"30312",
  "contactName":"Jane Doe",
  "contactEmail":"jane@example.com",
  "contactPhone":"+1-404-555-0100",
  "preferredWindows":"Today 2–6pm or Tomorrow AM"
}
 201 → { "id":"...", "publicTrackingCode":"..." }


GET /api/pro-requests/:id?admin=true


If admin=true, require Authorization: Bearer ADMIN_API_TOKEN; return full details.


Else return redacted contact fields.


PATCH /api/pro-requests/:id/status (admin-only)
 Body: { "status":"assigned", "providerAssigned":"Peachtree Roofing" }
 Returns updated record.


GET /api/providers?trade=roofing&zip=30312
 Returns matching providers array.


Acceptance criteria
Form submission persists to SQLite and returns a confirmation with a tracking URL.


SendGrid sends admin + requester emails successfully (use sandbox mode in dev).


Admin list shows new requests; status updates reflect immediately on tracking page.


Uploads work locally and with Cloudinary when configured.


Tests cover happy path + basic failures; email wrapper retries on 429.


Implementation notes (SendGrid)
Create services/notify.ts exporting sendAdminNewRequestEmail(proRequest) and sendUserConfirmationEmail(proRequest).


If template IDs are provided, use dynamic_template_data to populate fields; else compose simple HTML with key fields and links.


Add basic link tracking (default SendGrid settings); do not embed images—use photo URLs.




