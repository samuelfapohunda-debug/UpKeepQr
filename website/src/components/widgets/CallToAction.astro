---
import type { HTMLAttributes } from 'astro/types';

export interface Props extends HTMLAttributes<'section'> {
  title?: string;
  subtitle?: string;
  tagline?: string;
  actions?: Array<{
    variant?: 'primary' | 'secondary' | 'outline';
    text: string;
    href?: string;
    target?: string;
    icon?: string;
  }>;
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  actions = [],
  ...rest
} = Astro.props;
---

<section class="bg-primary-900 dark:bg-slate-800 text-white" {...rest}>
  <div class="mx-auto max-w-7xl px-4 py-16 sm:px-6 lg:px-8 lg:py-20">
    <div class="text-center">
      {tagline && (
        <p
          class="text-base text-primary-200 dark:text-slate-400 font-semibold tracking-wide uppercase mb-2"
          set:html={tagline}
        />
      )}
      {title && (
        <h2
          class="text-4xl md:text-5xl font-bold leading-tighter tracking-tighter mb-4 font-heading text-white"
          set:html={title}
        />
      )}
      {subtitle && (
        <p
          class="max-w-3xl mx-auto text-xl text-primary-200 dark:text-slate-300 mb-8"
          set:html={subtitle}
        />
      )}
      {
        actions && (
          <div class="flex flex-col sm:flex-row gap-4 justify-center">
            {actions.map(({ variant = 'primary', text, href, target, icon }) => (
              <a
                class:list={[
                  'btn',
                  {
                    'btn-primary': variant === 'primary',
                    'btn-secondary': variant === 'secondary',
                    'btn-outline-white': variant === 'outline',
                  },
                ]}
                href={href}
                target={target}
              >
                {icon && <Fragment set:html={icon} />}
                {text}
              </a>
            ))}
          </div>
        )
      }
    </div>
  </div>
</section>