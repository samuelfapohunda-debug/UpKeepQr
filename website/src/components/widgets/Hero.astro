---
import type { HTMLAttributes } from 'astro/types';

export interface Props extends HTMLAttributes<'section'> {
  title?: string;
  subtitle?: string;
  tagline?: string;
  content?: string;
  actions?: Array<{
    variant?: 'primary' | 'secondary' | 'outline';
    text: string;
    href?: string;
    target?: string;
    icon?: string;
  }>;
  image?: {
    src: string;
    alt: string;
  };
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  content = await Astro.slots.render('content'),
  actions = [],
  image,
  ...rest
} = Astro.props;
---

<section class="relative md:-mt-[76px] not-prose" {...rest}>
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true"></div>
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6">
    <div class="pt-0 md:pt-[76px] pointer-events-none"></div>
    <div class="py-12 md:py-20">
      <div class="text-center pb-10 md:pb-16 max-w-5xl mx-auto">
        {tagline && (
          <p
            class="text-base text-secondary-600 dark:text-secondary-400 font-semibold tracking-wide uppercase"
            set:html={tagline}
          />
        )}
        {title && (
          <h1
            class="text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-4 font-heading text-primary-900 dark:text-slate-200"
            set:html={title}
          />
        )}
        <div class="max-w-3xl mx-auto">
          {subtitle && <p class="text-xl text-muted dark:text-slate-400 mb-6 font-normal" set:html={subtitle} />}
          {
            actions && (
              <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4">
                {actions.map(({ variant = 'primary', text, href, target, icon }) => (
                  <a
                    class:list={[
                      'btn',
                      {
                        'btn-primary': variant === 'primary',
                        'btn-secondary': variant === 'secondary',
                        'btn-outline': variant === 'outline',
                      },
                    ]}
                    href={href}
                    target={target}
                  >
                    {icon && <Fragment set:html={icon} />}
                    {text}
                  </a>
                ))}
              </div>
            )
          }
        </div>
        {content && <Fragment set:html={content} />}
      </div>
      {image && (
        <div class="relative m-auto max-w-5xl">
          <img
            class="mx-auto rounded-md w-full"
            src={image.src}
            alt={image.alt}
            loading="eager"
            decoding="async"
            width={1024}
            height={576}
          />
        </div>
      )}
    </div>
  </div>
</section>